/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package infosec.captcha;

import java.util.HashMap;

import io.javalin.Javalin;
import io.javalin.http.staticfiles.Location;

public class App {
    public static int PORT = 4567;
    private static String verySensitiveData = "Flag${You_are_a_J0ke}";
    private static String veryNotSensitiveData = "HL3 does not exist.  You fool.";

    public static void main(String[] args) {

        var app = Javalin.create(config -> {
            config.addStaticFiles("/public", Location.CLASSPATH);
            // config.sessionHandler(Sessions::fileSessionHandler);
        });
        app.start(PORT);

        app.get("/session", ctx -> {
            // show keys store for this session
            ctx.result("session id=" + ctx.req.getSession().getId());
        });

        app.get("/invalidate", ctx -> {
            // if you want to invalidate a session, jetty will clean everything up for you
            ctx.req.getSession().invalidate();
            ctx.redirect("/");
        });

        app.get("/secret", ctx -> {
            var currentUser = ctx.sessionAttribute("user");
            if (currentUser == null) {
                ctx.result(veryNotSensitiveData);
                System.out.println("I: secret forbidden");

            } else {
                ctx.result(verySensitiveData);
                System.out.println("I: secret revealed to " + currentUser);
            }

        });

        app.get("/currentuser", ctx -> {
            String currentUser = ctx.sessionAttribute("user");
            if (currentUser == null) {
                currentUser = "";
            }
            ctx.result(currentUser);
        });

        // ! captcha stuff
        HashMap<String, Integer> captchaPair = new HashMap<>();
        // sessionID, answer

        app.get("/logout", ctx -> {
            var id = ctx.req.getSession().getId();
            captchaPair.remove(id);
            ctx.redirect("/invalidate");
        });

        app.post("/login", ctx -> {
            // take user name
            // take captcha
            String val_user = ctx.formParam("user");
            String val_ans = ctx.formParam("ans");

            // validate
            if (val_user.isBlank()){val_user="<empty>";}
            var id = ctx.req.getSession().getId();
            try {
                
                var ans = captchaPair.get(id);
                boolean success = false;
                if (Integer.parseInt(val_ans) == ans) {
                    success = true;
                }

                // if success
                if (success) {
                    ctx.sessionAttribute("user", val_user);
                }
            } catch (NullPointerException | NumberFormatException e2) {
                // do nothing
            } finally {
                System.out.println("session user=" + val_user + " id=" + id + " answer=" + val_ans);
                ctx.redirect("/");
            }
        });

        app.get("/captcha", ctx -> {
            // destroy last captcha
            // regen
            ctx.contentType("image/png");
            ctx.res.setHeader("Cache-Control", "no-cache");
            var id = ctx.req.getSession().getId();
            var out = ctx.res.getOutputStream();
            var cp = new Captcha(out);

            captchaPair.put(id, cp.getAnswer());
        });

        // ! debug purpose
        app.get("/write/:value", ctx -> {
            // values written to the session will be available on all your instances if you
            // use a session db
            String val = ctx.pathParam("value");
            ctx.sessionAttribute("my-key", val);
            ctx.html("took value=" + val);
        });

        app.get("/read", ctx -> {
            // values on the session will be available on all your instances if you use a
            // session db
            String myValue = ctx.sessionAttribute("my-key");
            ctx.html(myValue);
        });

    }

    // https://javalin.io/tutorials/jetty-session-handling

}
